---
title:  Mini-Curso - Explorando finanças com R 
author:
  - name: Marcus Ramalho & Ariel Levy
format:
  revealjs:
      incremental: false
      transition: slide
      background-transition: fade
      theme: night
      header: VIII SER - Seminário Internacional de Estatística com R
      header-logo: images/ser.png
      logo: images/uff.png
      
filters:
  - reveal-header
date: today
footer: PPGAd Universidade Federal Fluminense
toc: false
css: styles.css
execute: 
  echo: true
---

```{r}
#| echo: false
library(countdown)
```

## Ariel Levy

::: {style="display: flex; justify-content: space-between;"}
::: columns
::: {.column width="30%"}
![](images/Ariel.jpg)
:::

::: {.column width="70%"}



Doutor em Economia (Universidade Federal Fluminense - 2013), mestre em Administração (IBMEC -2003) e engenheiro eletricista (Universidade Federal Fluminense - 1982). Sou Professor Associado da Universidade Federal Fluminense vinculado ao Departamento de Administração da Faculdade de Administração e Ciências Contábeis e fui coordenador do Curso de Graduação em Administração (2016-2021). Professor do quadro permanente do PPGAd - UFF e colaborador no MBA de Logística (LOGEMP - UFF), no MBA de Finanças (UFF), no MBA de Marketing (UFF) e dos cursos de Extensão em Ciências dos Dados (UFF) como atual coordenador. Possui experiência em Administração, com ênfase em Finanças Quantitativas; Finanças publicas; Planejamento e Controle: Ciências dos Dados: na linguagem R e na análise e visualização de dados. Organizador dos Seminários de Estatística R - Evento Internacional de Divulgação de Aplicações e Desenvolvimento de Linguagens R. Coordenador do Grupo de Pesquisa (CNPQ/UFF) - Métodos Quantitativos Aplicados à Administração.



:::
:::
:::

## Marcus Ramalho

::: columns
::: {.column width="30%"}
![](images/Marcus.jpg)
:::

::: {.column width="70%"}


Possui graduação em Administração pela Universidade Federal Fluminense (2020) e é candidato ao título de mestre em Administração pelo programa de pós-graduação em administração da UFF (PPGAd-UFF). É professor convidado dos MBAs de Ciências de Dados e de Finanças Corporativas e Mercados de Capitais na UFF. Tem experiência em ciência de dados com R e Python, programação funcional e desenvolvimento de bots, mapeamento e automação de processos administrativos. Tem interesse em Administração da Informação, Gestão do Conhecimento Pessoal, Economia Política, Finanças, R e Python.


:::
:::

## Sumário

1.  Relembrar conceitos de finanças e aplicar o R na análise e visualização de seu portfólio.

2.  Importar os preços dos ativos da internet direto do yahoo.com

3.  Transformar os preços diários em mensais e obter os retornos.

4.  Visualização dos dados.

5.  Retorno da carteira

6.  Visualizar o retorno da carteira.

7.  Análise do risco.

8.  Beta do portfólio e de cada ativo.

9.  Índice sharpe

10. Aprender a criar um dashboard com seus dados e gráficos.

## Relembrando conceitos de finanças

::: panel-tabset
## Qual a sua motivação para investir?

-   Qual a motivação para investir?

-   Já investiu em renda variável?

-   Quais os riscos?

-   Como escolher seus ativos?

## Motivação

![](https://jonmgomes.com/wp-content/uploads/2020/05/Comp_1.gif)

## Renda variável

![](images/candles.jpg)

## OHLC

![](images/candles2.jpg)
:::

## Importar os preços dos ativos da internet direto do yahoo.com

::: panel-tabset
## Fundamentus

<div>

<iframe src="https://fundamentus.com.br/" width="1900" height="550">

</iframe>

</div>

## carregar pacotes e selecionar ativos

```{r}
## pacote utilizados
pacotes <- c("tidyverse", "quantmod", "timetk", "plotly", "PerformanceAnalytics")
purrr::walk(pacotes, library, character.only = TRUE)

# Ativos escolhidos
tickers <- c("VALE3.SA","PETR4.SA","CMIG4.SA","RADL3.SA","ITUB4.SA","^BVSP")

# w <- c(0.15, 0.25, 0.1, 0.2, 0.3)
```

## Importar preços dos ativos

-   O Formato XTS

```{r}
prices_raw <- 
  getSymbols(tickers, 
             src = 'yahoo', 
             from = "2019-12-31",
             to = "2024-05-31",
             auto.assign = TRUE, #obs auto asign carrega os resultados para o ambiente
             warnings = FALSE,)

prices<-prices_raw %>%             
  map(~Ad(get(.))) %>% 
  reduce(merge) %>%
  `colnames<-`(tickers)

```

## Prices

```{r}
prices %>%
  tk_tbl() %>%
  head()
```
:::

## Retornos de um ativo

Retorno Linear = $\frac{P_{t} - P_{t-1}}{P_{t-1}}$

Retorno Logarítmico = $ln(\frac{P_{t}}{P_{t-1}})$

## Exercícios

::: panel-tabset
## Exercício 1

`r countdown(minutes = 5, seconds = 00)`

1. Suponha que uma ação caia 50% e depois suba 50%, de quanto foi a variação total no período? dica (Componha o retorno destes dois períodos utilizando juros compostos.)

## " "

```{r}

valor_inicial <- 100
valor_apos_queda <- valor_inicial - (valor_inicial * 0.50)
valor_final <- valor_apos_queda + (valor_apos_queda * 0.50)

variacao_total <- (valor_final - valor_inicial) / valor_inicial
variacao_total

```
:::

## Transformar os preços diários em mensais e obter os retornos.

::: panel-tabset
## Preços mensais

```{r}
prices_monthly <- xts::to.monthly(prices, indexAt = "lastof", OHLC = FALSE)

head(prices_monthly)

```

## Retornos mensais

```{r}
asset_returns_xts <-
 PerformanceAnalytics::Return.calculate(prices_monthly, 
                   method = "discrete") %>% 
  na.omit()
head(asset_returns_xts)
```
:::

## Visualização dos dados

::: panel-tabset
## Preços com quantmod

```{r}

## Visualizar os preços com quantmod
graficoscandle <- chartSeries(head(BVSP, 30), 
            TA = "addVo()",
            type = "candlesticks",
            time.scale = "years",)



```

## Retornos com ggplot2

```{r}
asset_returns_tbl <- asset_returns_xts %>% 
  tk_tbl(rename_index = "Data") %>% #converte em um data frame para plotar com ggplot
  pivot_longer(!"Data" ,names_to = "assets")#seleciona todas as colunas menos data

#plotando com o ggplot e com o plotly
g1 <- ggplot(asset_returns_tbl) +
  aes(x = Data, y = value, colour = assets) +
  geom_line() +
  scale_color_hue(direction = 1) +
  labs(title = "Retornos de 2019 a 2024")+ #Aqui nos podemos mudar as legendas
  theme_minimal()

```

## ggplot2

```{r}
g1
```

## Com plotly

```{r}
plotly::ggplotly(g1)
```
:::

## Não sabe usar o ggplot2?

::: panel-tabset
## Esquisse

```{r}
#| eval: false
esquisse::esquisser(asset_returns_tbl)
```

```{r}
#| echo: false
pbp <- ggplot(asset_returns_tbl) +
  aes(x = "", y = value, fill = assets) +
  geom_boxplot() +
  scale_fill_brewer(palette = "OrRd", direction = 1) +
  labs(
    x = "Ativos",
    y = "Retornos",
    title = "Box Plot - Retorno dos ativos",
    fill = "Ativos"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16L,
    face = "bold",
    hjust = 0.5),
    axis.title.y = element_text(face = "bold"),
    axis.title.x = element_text(face = "bold")
  )

pbp

```

## Box Plot dos retornos

```{r}
#| eval: false
pbp <- ggplot(asset_returns_tbl) +
  aes(x = "", y = value, fill = assets) +
  geom_boxplot() +
  scale_fill_brewer(palette = "OrRd", direction = 1) +
  labs(
    x = "Ativos",
    y = "Retornos",
    title = "Box Plot - Retorno dos ativos",
    fill = "Ativos"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16L,
    face = "bold",
    hjust = 0.5),
    axis.title.y = element_text(face = "bold"),
    axis.title.x = element_text(face = "bold")
  )

pbp

```
:::

## Retorno da carteira.

::: panel-tabset
## Pesos dos ativos

O somatório dos pesos deve ser igual a 1.

```{r}
set.seed(1234) 
w <- runif(5) # Gerando 4 pesos aleatórios
w <- w / sum(w) # Normalizando os pesos para que a soma seja 1
w

```

O cálculo do retorno de uma carteira depende do retorno de cada ativo e de seu peso na carteira e pode ser obtido pela média ponderada:

$$ \bar{k}=\sum_{i=i}^n{w_i*k_i}$$

## Retorno da carteira

```{r}

# removendo o índice do IBOV da lista de ativos para calcular o retorno da carteira
retorno_ativos <- asset_returns_xts[, tickers[1:5]]

portfolio_returns_xts<-PerformanceAnalytics::Return.portfolio(retorno_ativos,
                 weights = w,
                 rebalance_on = "months",
                 type= "discrete",
                 verbose = FALSE) %>% 
  `colnames<-`("CARTEIRA")
head(portfolio_returns_xts,3)
```
:::

## Exercícios

::: panel-tabset
## Exercício 2

`r countdown(minutes = 10, seconds = 00)`

2. Determinado agente possui uma carteira formada pelas seguintes posições: R\$25000,00 no ativo A e R\$50000,00 no ativo B.

Quais os pesos de sua carteira?

Se para a manutenção destas posições o agente tivesse emprestado R\$40000,00 ao Banco X, qual seria a estrutura dos pesos de sua carteira?

## ""

::: columns
::: column
```{r}
# Valores das posições
ativo_A <- 25000
ativo_B <- 50000

# Valor total da carteira
total <- ativo_A + ativo_B

# Pesos
peso_A <- ativo_A / total
peso_B <- ativo_B / total

peso_A
peso_B

```
:::

::: column
```{r}
emprestimo <- -40000

total <- total + emprestimo

peso_A <- ativo_A / total
peso_B <- ativo_B / total
emprestimo <- emprestimo / total

peso_A
peso_B
emprestimo

sum(peso_A, peso_B, emprestimo)
```
:::
:::
:::

## Visualizar o retorno da carteira.

::: panel-tabset
## Retorno da carteira

```{r}
plot(portfolio_returns_xts)
```

## Códigos

```{r}
comparacao <- cbind(asset_returns_xts, portfolio_returns_xts) %>% 
  tk_tbl(rename_index = "Data") %>% 
  pivot_longer(-Data, names_to = "assets", values_to = "value")

p <- ggplot(comparacao, aes(x = Data, y = value, colour = assets)) +
  geom_line() +
  scale_color_hue(direction = 1) +
  labs(
    x = "Data",
    y = "Retornos",
    title = "Retorno dos ativos vs carteira",
    colour = "Ativos"  
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16L, face = "bold", hjust = 0.5),
    axis.title.y = element_text(face = "bold"),
    axis.title.x = element_text(face = "bold")
  )

comp_mkt <- comparacao %>%
 filter(assets %in% c("X.BVSP", "CARTEIRA")) %>%
 ggplot() +
  aes(x = Data, y = value, colour = assets) +
  geom_line() +
  scale_color_hue(direction = 1) +
  labs(title = "Carteira VS Índice do mercado - 2020 - 2023",
        x = "Data",
        y = "Retornos",
        colour = "Ativos"  
  )+
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16L, face = "bold", hjust = 0.5),
    axis.title.y = element_text(face = "bold"),
    axis.title.x = element_text(face = "bold")
  )
  
```

## Ativos vs Carteira

```{r}
ggplotly(p)
```

## Mercado vs Carteira

```{r}
ggplotly(comp_mkt)
```
:::

## Análise do risco.

::: panel-tabset

## Desvio padrão

$$\bar{X}=\sum_{i=1}^n{\pi_iX_i}$$

```{r}


# desvio padrao dos precos dos ativos

mean_value <- mean(asset_returns_tbl$value, na.rm = TRUE)
sd_value <- sd(asset_returns_tbl$value, na.rm = TRUE)

distribuicaodp <- plotly::ggplotly(asset_returns_tbl %>%
  filter(assets %in% "PETR4.SA") %>%
  mutate(faixa_inferior = if_else(value < (mean_value - sd_value), value, as.numeric(NA)),
         faixa_superior = if_else(value > (mean_value + sd_value), value, as.numeric(NA)),
         faixa_central = if_else(value > (mean_value - sd_value) & value < (mean_value + sd_value), value, as.numeric(NA))) %>%
  ggplot() +
  geom_point(aes(x = Data, y = faixa_inferior), color = "red") +
  geom_point(aes(x = Data, y = faixa_superior), color = "green") +
  geom_point(aes(x = Data, y = faixa_central), color = "blue") +
  geom_hline(yintercept = (mean_value + sd_value), color = "purple", linetype = "dotted") +
  geom_hline(yintercept = (mean_value - sd_value), color = "purple", linetype = "dotted") +
  labs(
    x = "Data",
    y = "Retornos",
    title = "Distribuição padronizada - PETR4.SA",
    color = "Ativo"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16L, face = "bold", hjust = 0.5),
    axis.title.y = element_text(face = "bold"),
    axis.title.x = element_text(face = "bold")
  ))



```


## Distribuição padronizada

```{r}
#| echo: false
distribuicaodp
```

## Risco do ativo

::: {.columns}

::: {.column}

$$ CV= \frac{\sigma}{\bar{K}}$$

![](images/paste-1.png){width="505"}
:::
::: {.column}

```{r}

# Cria o data frame risco_retorno
risco_retorno <- cbind(asset_returns_xts, portfolio_returns_xts) %>% 
  tk_tbl(preserve_index = FALSE) %>%
  summarise(across(everything(), list(Desvio_padrao = sd, Retorno_Medio = mean, Risco = ~sd(.)/mean(.)))) %>% 
  pivot_longer(cols = everything(), names_to = "Ativo", values_to = "Valor") %>%
  separate(Ativo, into = c("Ativo", "Medida"), sep = "_", extra = "drop") %>%
  pivot_wider(names_from = "Medida", values_from = "Valor")

pesos_ativos <- tibble(Ativo = tickers[1:5], Peso = w)
pesos_ativos <- pesos_ativos %>% add_row(Ativo = "CARTEIRA", Peso = 1)



# Junta o novo data frame ao data frame risco_retorno
risco_retorno <- risco_retorno %>%
  left_join(pesos_ativos, by = "Ativo")

# Cria o gráfico
rr <- plotly::ggplotly(risco_retorno %>%
  ggplot(aes(x = Risco, y = Retorno, colour = Ativo, size = Peso)) +
  geom_point() +
  scale_color_hue(direction = 1) +
  labs(title = "Risco vs Retorno dos Ativos", size = "Pesos e", colour = "ativos") +
  theme_minimal() +
  theme(plot.title = element_text(size = 16L, face = "bold", hjust = 0.5)))

```

:::
::: 

## Risco vs Retorno 

```{r}
#| echo: false
rr
```

:::

## Beta

::: panel-tabset

## Beta da carteira e de cada ativo.

```{r}
# Calculando o beta do portfólio e de cada ativo

beta_long <- PerformanceAnalytics::CAPM.beta(cbind(asset_returns_xts, portfolio_returns_xts), asset_returns_xts$'^BVSP', Rf = 0) %>%
  as.data.frame() %>%
  rownames_to_column(var = "indice") %>%
  pivot_longer(cols = -indice, names_to = "Ativo", values_to = "beta") %>%
  select(-indice) %>% 
  inner_join(risco_retorno, by = "Ativo") %>%
  select(Ativo,Desvio, beta, Risco, Retorno)

beta_long

```

## Beta vs Retorno

```{r}
beta <- plotly::ggplotly(ggplot(beta_long) +
  aes(y = Retorno, x = beta, colour = Ativo) +
  geom_point() +
  scale_color_hue(direction = 1) +
  labs(y = "Retorno", x = "Beta", title = "Beta vs Retorno") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16L,
    face = "bold",
    hjust = 0.5)
  ))
```

## Gráfico - Beta vs Retorno

```{r}
beta
```

:::

## Indice sharpe

$$ SR = \frac{R_p - R_f}{\sigma_p}$$

Onde $R_p$ é o retorno da carteira, $R_f$ é a taxa livre de risco e $\sigma_p$ é o desvio padrão da carteira.

```{r}
# Calculando o índice sharpe com perfomance analytics

sharpe_carteira <- PerformanceAnalytics::SharpeRatio(portfolio_returns_xts, Rf = 0, p = 0.95, FUN = "StdDev")

sharpe_ativos <- PerformanceAnalytics::SharpeRatio(asset_returns_xts, Rf = 0, p = 0.95, FUN = "StdDev")

sharpe_carteira

sharpe_ativos %>% head()

```

## Exercício 

3. Selecione uma carteira adicionando pelo menos 6 ativos que supere o IBOV em resultados com no máximo 20% a mais de risco. 

4. Crie um dashboard com os gráficos com seus dados e gráficos com base na carteira selecionada.

`r countdown(minutes = 30, seconds = 00)`

## Contato

-   Marcus Ramalho:
    -   [GitHub](https://github.com/nextmarte)
    -   E-mail: marcusantonio@id.uff.br
    -   linkedin: [Marcus Ramalho](https://www.linkedin.com/in/marcus-ramalho-8a440545/)

-   Ariel Levy:
    -   [GitHub](https://github.com/alevy59)
    -   E-mail: alevy@id.uff.br
    -   linkedin: [Ariel Levy](https://www.linkedin.com/in/ariel-levy-3623136/)